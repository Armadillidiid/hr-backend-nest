// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "foreignKeys"
}

enum PricingPlan {
  BASIC
  PRO
}

enum PricingType {
  ONE_TIME
  RECURRING
}

enum PricingInterval {
  DAY
  WEEK
  MONTH
  YEAR
}

enum SubscriptionStatus {
  TRIALING
  ACTIVE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAST_DUE
  UNPAID
  PAUSED
}

model User {
  id                      Int                @id @default(autoincrement()) // eg. 69
  publicId                String             @unique // eg.411s27l6hnxa
  firstName               String
  lastName                String
  email                   String             @unique
  phoneNumber             String
  password                String
  registrationInitializer SignUpInitializer?
  session                 Session[]
  businessOwner           BusinessOwner?
  referralSource          ReferralSource?    @relation(fields: [referralSourceId], references: [id])
  referralSourceId        Int?
  billingAddress          Json?
  paymentMethod           Json?
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt

  @@map("User")
}

model SignUpInitializer {
  id              Int     @id @default(autoincrement())
  user            User    @relation(fields: [userId], references: [id])
  userId          Int     @unique
  signUpCompleted Boolean @default(false) // If true, the user has completed all the steps of the sign up process
  emailVerified   Boolean @default(false) // If false, the user has not verified their email thus redirect to verify email page
  businessCreated Boolean @default(false) // If false, the user has not created a business thus redirect to create business page
  planSelected    Boolean @default(false) // if false, the user has not selected a plan thus redirect to select plan page

  @@map("RegistrationInitializer")
}

model Pricing {
  id              String          @id @default(cuid())
  unitAmount      Int // 1000
  currency        String // "usd"
  active          Boolean
  type            PricingType? // RECURRING
  interval        PricingInterval // MONTH
  intervalCount   Int // 1
  trialPeriodDays Int // 7
  metadata        Json? // {"key": "value"}
  Product         Product         @relation(fields: [productId], references: [id])
  productId       String
  Subscription    Subscription[]
}

model Product {
  id          String      @id @default(cuid()) // 12
  name        PricingPlan // "PRO"
  description String // "Pro plan"
  active      Boolean // true
  pricing     Pricing[]
  metadata    Json?
}

model Subscription {
  id                 String             @id
  organization       Organization       @relation(fields: [organizationId], references: [id]) // Reference to the user who owns this subscription.
  organizationId     Int
  status             SubscriptionStatus // The status of the subscription object.
  price              Pricing            @relation(fields: [priceId], references: [id]) // Reference to the pricing that created this subscription.
  priceId            String
  quantity           Int? // Quantity multiplied by the unit amount of the price creates the amount of the subscription. Can be used to charge multiple seats.
  cancelAtPeriodEnd  Boolean // If true, the subscription has been canceled by the user and will be deleted at the end of the billing period.
  created            DateTime           @default(now()) // Time at which the subscription was created.
  currentPeriodStart DateTime           @default(now()) // Start of the current period that the subscription has been invoiced for.
  currentPeriodEnd   DateTime           @default(now()) // End of the current period that the subscription has been invoiced for.
  endedAt            DateTime? // If the subscription has ended, the timestamp of the date the subscription ended.
  canceledAt         DateTime? // If the subscription has been canceled, the date of that cancellation.
  trialStart         DateTime? // If the subscription has a trial, the beginning of that trial.
  trialEnd           DateTime? // If the subscription has a trial, the end of that trial.
  metadata           Json?
}

model UserOrganizationProfile {
  id             Int    @id
  publicId       String @unique
  userId         Int
  organizationId String
  position       String
  seniority      String
  role           String
  profilePicture Int

  @@map("EmployeeProfile")
}

model OrganizationSubscription {
  id               Int       @id @default(autoincrement())
  organizationId   Int
  pricingId        Int
  month            Int
  numberOfEmployee Int
  amountPaid       Int
  billingCycle     String
  startDate        Int
  endDate          DateTime?

  @@map("OrganizationSubscription")
}

model Organization {
  id                         Int              @id
  publicId                   String           @unique
  name                       String
  tradingName                String
  industry                   String
  entityType                 String
  phoneNumber                String
  businessRegistrationNumber String
  taxId                      String
  address                    Address[]
  pointOfContact             PointOfContact[]
  primaryAddress             PrimaryAddress?
  businessOwner              BusinessOwner?
  subscription               Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Organization")
}

model PrimaryAddress {
  id             String       @id
  address        Address      @relation(fields: [addressId], references: [id])
  addressId      String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int          @unique
  primary        Boolean

  @@unique([organizationId, addressId])
}

model Address {
  id             String          @id
  streetOne      String
  streetTwo      String?
  city           String?
  state          String?
  countryIsoCode String
  zipCode        String?
  country        String?
  organizationId Int
  Organization   Organization    @relation(fields: [organizationId], references: [id])
  PrimaryAddress PrimaryAddress?

  @@map("Address")
}

model Session {
  id        Int       @id @default(autoincrement())
  publicId  String    @unique
  hash      String
  createdAt DateTime  @default(now())
  updatedAt DateTime
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])
  userId    Int

  @@map("Session")
}

model BusinessOwner {
  id             String       @id
  user           User         @relation(fields: [userId], references: [id])
  userId         Int          @unique
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int          @unique

  @@map("BusinessOwnerProfile")
}

model PointOfContact {
  id             Int           @id @default(autoincrement())
  email          String
  phone          String
  name           String
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId Int

  @@map("PointOfContact")
}

model EditHistory {
  id        Int      @id @default(autoincrement())
  name      String
  object    Json
  createdBy Int
  updatedAt DateTime

  @@map("EditHistory")
}

model SignUpInterest {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model SignUpAnalytics {
  id             Int  @id @default(autoincrement())
  organizationId Int  @unique
  interestedIn   Json // { "interests": [1, 2, 3] }

  @@map("SignUpAnalytics")
}

model ReferralSource {
  id     Int    @id @default(autoincrement())
  source String
  User   User[]

  @@map("Referral")
}
